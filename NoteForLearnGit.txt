----------------------Git 学习笔记--------------------------

1.Git install for Windows
   a.download from https://git-for-windows.github.io 按照默认选项安装即可；
   b.安装完成后，在开始菜单中找到"Git"->"Git Bash"，蹦出一个类似于命令行的窗口，说明Git安装成功；
   c.安装完成后，还需进一步设置，在命令行输入：
   -----------------------------------------------------------
   -  $ git config --global user.name "Your Name"            -
   -  $ git config --global user.email "email@example.com"   -
   -----------------------------------------------------------
   
   注意：git config命令的--global 参数，使用了该参数，表示这台机器上的所有Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email Address.
   
   
   
2.创建版本库
  定义： 版本库又名仓库，英文名repository，可以简单理解为一个目录，该目录CIA所有文件可以被Git管理起来，
        每个文件的删除、修改，Gitd都能跟踪，以便任何时候都可以追踪历史，或者在将来某个时刻将其'还原'；
	
   a. 创建版本库非常简单，首先，选择一个合适的地方，创建一个空目录，如下：
   --------------------------------------------------------------
   -  $ mkdir learngit                                          -
   -  $ cd learngit                                             -
   -  $ pwd                                                     -
   --------------------------------------------------------------
   
   pwd--显示当前目录
   Windows 上不要使用中文目录 or  文件名；
   
   b. 通过 git init 将这个目录变成Git可以管理的仓库：
   ------------------------------- 
   - $ git init                  -
   -------------------------------
   完成后，目录下多了一个.git的目录，不要对其进行修改，否则Git库可能会受破坏；
   如果没有看到.git目录，那是因为这个目录被掩藏了，用 ls -ah 命令就可以看见；
   
   注意：所有的版本控制系统，只能跟踪文本文件的改动，eg.txt、网页、所有的程序代码等等；
         文本不要使用Windows自带的txt或word编写，易遇到问题；
		 Notepad++ is recommended.
		 
  c. 添加文件到Git库，两步进行：
     第一步：使用命令 git add <file>，可多次使用，添加多个文件；
	 第二步：使用命令 git commit -m "discribe the commit";



3. Git修改常用操作命令	
   git status--->可以让我们时刻掌握仓库当前的状态；
   git diff  --->若Git告知我们文件被修改了，我们想知道具体修改的内容，可使用该命令查看（or   git diff <file name>）；
   git log   --->查看命令行历史记录；
   git reset --hard HEAD^--->返回上一个版本，HEAD表示当前版本，HEAD^表示上一版本，HEAD~100表示前100个版本；
   cat <file name>--->显示当前文本内容；
   git reset --hard <commit id>--->返回到该id的版本；
   git reflog--->记录你的每一次命令，可查看历史，已确定要回到未来的哪个版本；
   
   

4.常见的几个概念
  工作区（Working Directory）：就是你电脑里面能看到的目录，例如刚才创建的  learngit 文件夹就是一个工作区；
  版本库（repository）：工作区有一个掩藏目录.git，这个不算工作区，而是Git的版本库。Git版本库里面存了许多东西，其中最重要的是称为stage（或者index）的
                        暂存区，还有git自动创建的第一个分支master，以及只想master的一个指针 HEAD；
            
    --------------------------------------------------------------------------------------------		
    -	第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；                -
    -   第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。         -
    --------------------------------------------------------------------------------------------
	注意：每一次修改，如果不  add  到暂存区，就不会添加到commit中；
	
	
5.关于撤销修改
    git checkout <file name>
	                --->把<file name>文件在工作区的修改全部撤销，分两种状况：
					    a. 一种是<file name>文件自修改后没有放到暂存区，撤销修改后回到和版本库一模一样的状态；
						b. 一种是<file name>文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态；
						总之，就是让这个文件回到最近一次git commit或git add时的状态。
  
  
    git reset HEAD file--->可以把暂存区的修改撤销掉（unstage），重新放回工作区;
 

6.关于删除
  rm <file name>--->直接在文件管理器删除文件，或用该命令行进行删除；
          此时存在一个问题，工作区与版本库的文件不一致了，git status可查看哪些文件被删除了，现在存在两个选择：
		  a. 一是确实要从版本库中将文件删除，那么就用命令git rm <file name>,并且git commit提交；
		  b. 文件属于误删除，但此时也不要着急，引文版本库中还有呢，所以可以轻松地将误删除的文件恢复到最新版本，使用命令git checkout --<file name>；
		  
		  
		  
7.远程仓库
  由于电脑本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要进行设置：
  第一步：首先查看Git本地目录下有没有id_rsa and id_rsa.pub两个文件，若有，好，下一步；若没有，在Git Bash中键入如下命令：ssh-keygen -t rsa -C "youremail@example.com"；
          （id_rsa是私匙，id_rsa.pub为公匙）
  第二步：在GitHub中“SSH Keys”页面键入id_rsa.pub内容；
  OK ，结束！
  
  
8.添加远程库
  a. 首先在GitHub创建远程库，同名本地库，例如learngit,此时可将这个哭克隆出新的仓库，也可将其与本地库关联，然后将本地库推到远程库;
  b. 关联本地库，git remote add origin git@github.com:haishangyanghang/learngit.git--->注意，需要将haishangyanghang修改为自己的用户名；
  c. 将本地库推到远程库，git push -u origin master--->把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程,由于远程库是空的，
     我们第一次推送master分支时，加上了-u参数,Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联
	 起来，在以后的推送或者拉取时就可以简化命令;
  d. 从现在起，只要本地作了提交，就可以通过命令：git push origin master--->把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！
  
  
9.克隆远程库
  应用场景：假设从零开始开发，那么最好的方式就是先建立远程库，然后将其克隆到本地，该方案可很好的用于协同开发；
  常用的克隆远程库命令行：
  
  git clone git@github.com:haishangyanghang/2017hosts.git--->理论上可以进行clone，但在我的计算机上失败了，再找找原因吧；
  git clone https://github.com/haishangyanghang/2017hosts.git --->clone 成功。
  
  ls--->可用于列出当前文件夹下的子文件；
  
  

9.创建与合并分支
  应用场景：分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，
            不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
  
  
  
            每一次提交，Git将其串成一条线，这个时间线就是一个分支。截止目前，只有一条时间线，在Git中，称之为主分支，即master分支。严格讲HEAD并非指向提交，而是指向
            master,master指向提交，故HEAD指向当前分支；   每次提交，master分支都会向前移动一步，随着不断提交，master分支线也越来越长；
			
			步骤方法：
			a. 创建新的分支,例如 dev,此时Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev,就表示当前分支在dev上（此后对工作区的修改和提交
			   就是针对dev分支了,master指针不变）；
			b. 在dev分支上工作完成，可将其合并到master分支，最简单的方法就是直接把master指向dev的提交，完成合并；
			c. 合并完成后，删除dev分支；
			

  具体实现：
          a. git checkout -b dev--->创建dev分支，并从主分支切换到dev分支，git checkout命令加上 -b 参数表示创建并切换，相
             当与以下两条命令：git branch dev;  git checkout dev;
          b. git branch--->查看当前分支，会列出所有分支，并在当前分支前面添加 * 号，之后可以肆无忌惮的在dev分支进行提交；
          c. git checkout master--->dev分支工作完成后，切换回master分支,查看刚才提交的文件，发现并没有发生改变，因为当前处于master分支,但提交的文件在dev分支;
          d. git mergr dev--->将dev分支合并到当前分支，即master分支，再查看所提交文件的内容，就可以看到，和dev分支的最新提交是完全一样的；
          e. git branch -d dev--->删除dev分支（git branch查看后发现分支的确消失）；   


10. 解决冲突
    合并分支往往也不是一帆风顺的;

   a. git checkout -b fd--->创建新的分支 fd ;修改NoteForLearnGit.txt中 10. 解决冲突 & 实现
   b. 在 fd 分支上add 并提交；
   c. git checkout master--->切换回master分支；
   d. 修改NoteForLearnGit.txt中 10. 解决冲突 and 实现，然后 add 并提交；
   e. git merge fd--->将 fd 分支合并到当前（master）分支，出现冲突；
     ---------------------------------------------------------------------------
     - Auto-merging NoteForLearnGit.txt
     - CONFLICT (content): Merge conflict in NoteForLearnGit.txt
     - Automatic merge failed; fix conflicts and then commit the result.
     ---------------------------------------------------------------------------
   查看当前提交文件的内容：
    ----------------------------------------------------------------------------
    -	<<<<<<< HEAD
    -	10. 解决冲突 and 实现
    -	=======
    -	10. 解决冲突 & 实现
    -	>>>>>>> fd
    ----------------------------------------------------------------------------

   f. 在master 分支下修改NoteForLearnGit.txt中 10. 解决冲突 and 实现为 中 10. 解决冲突 & 实现， add 并提交；
   g. git log --graph--->查看分支合并的情况；
   h. git branch -d fd--->删除 fd 分支；
   
   
   
   分支管理策略
   --->通常，合并分支时，如果可能，Git会用Fast forward 模式，但此时，删除分支后，会丢失分支信息；但若强制禁用Fast forward 模式，G题就会在merge时生成一个新的commit,
       这样，从分支历史上就可以看出分支信息了；
	   
	  举个栗子：
	  a. git checkout -b dev---->创建并切换到 dev 分支；
	  b. 修改NoteForLearnGit.txt 然后add 并提交；
	  c. git checkout master--->切换回master分支；
	  d. git merge --no-off -m "merge with-off dev" --->合并 dev 分支，--no-ff参数，表示禁用Fast forward；
	     因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去；
	  f. git log --graph--->查看分支历史；
	  
	  
	  
   Feature分支
   --->添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，
       最后，删除该feature分支。
    举例子：
	
	  现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船；
	  git checkout -b feature-vulcan---->5分钟后，开发完毕---->git add vulcan.py---->切回dev，准备合并git checkout dev---->因经费不足，新功能必须取消---->
	  ---->git branch -d feature-vulcan---->销毁失败---->git branch -D feature-vulcan，强行删除；
	  
	  
	  Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。
	  
	  
	  
	  
  多人协作
  --->master分支是主分支，因此要时刻与远程同步；
      dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步;
	  ug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	  总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
	  
	  
    多人协作的工作模式通常是这样：
    --->
	    1.首先，可以试图用git push origin branch-name推送自己的修改；
		2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull抓取并试图合并；
		3.如果合并有冲突，则解决冲突，并在本地提交；
		4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
		
		
		
		
		
11. 标签管理
    a. git checkout master--->切换到要打标签的分支上（git branch查看当前标签）;
    b. git tag <name>--->打标签；
    c. git tag--->查看所有标签；
	
	默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
	a. git log --->查看历史提交记录，找到需要打标签的commit id ,打标签；
	b. git tag <release number> <commit id>--->对commit id进行打标签； 
    c. git show <tagname>--->可用来查看标签信息；

       git tag -a v0.1 -m "version 0.1 released" 3628166---->可以创建带有说明的标签，用-a指定标签名，-m指定说明文字;
       git tag -s v0.2 -m "signed version 0.2 released" fec145a---->可以通过-s用私钥签名一个标签;
	                                                                签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错

    管理标签
	--->git tag -d <version number>---->标签打错，可删除（创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除）；
	    git push origin <tagname>--->推送某个标签到远程;
        git push origin --tags--->一次性推送全部尚未推送到远程的本地标签;
      
	  如果标签推送到了远程：
	  --->a. git tag -d <version number>--->先从本地删除;
	      b. git push origin :refs/tags/<version number>--->从远程删除;

		  
		  
		  
		  
12.使用GitHub
   Fork别人的库后，自己拥有Fork后库的读写权限；
   可以推送pull request给官方仓库来贡献代码；
   
   忽略特殊文件
   --->需要建立一个.gitignore文件，将忽略规则填写在其中；
      有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了(git add App.class)---->可以用-f强制添加到Git(git add -f App.class) ;
	  git check-ignore -v App.class---->可能.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查;

	  
	  
  配置别名
  --->git config --global alias.st status---->以后st就表示status;
      git config --global alias.last 'log -1'---->配置一个git last，让其显示最后一次提交信息;




















 